// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YogurtCleaning.DataLayer;

#nullable disable

namespace YogurtCleaning.DataLayer.Migrations
{
    [DbContext(typeof(YogurtCleaningContext))]
    [Migration("20220808151440_fixServices")]
    partial class fixServices
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BundleOrder", b =>
                {
                    b.Property<int>("BundlesId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("BundlesId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("BundleOrder");
                });

            modelBuilder.Entity("BundleService", b =>
                {
                    b.Property<int>("BundlesId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("BundlesId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("BundleService");
                });

            modelBuilder.Entity("CleanerDistrict", b =>
                {
                    b.Property<int>("CleanersId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictsId")
                        .HasColumnType("int");

                    b.HasKey("CleanersId", "DistrictsId");

                    b.HasIndex("DistrictsId");

                    b.ToTable("CleanerDistrict");
                });

            modelBuilder.Entity("CleanerOrder", b =>
                {
                    b.Property<int>("CleanersBandId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("CleanersBandId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("CleanerOrder");
                });

            modelBuilder.Entity("CleanerService", b =>
                {
                    b.Property<int>("CleanersId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("CleanersId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("CleanerService");
                });

            modelBuilder.Entity("OrderService", b =>
                {
                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("OrdersId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("OrderService");
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Bundle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Measure")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bundle", (string)null);
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Cleaner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfStartWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Schedule")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cleaner", (string)null);
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.CleaningObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfBalconies")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBathrooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfWindows")
                        .HasColumnType("int");

                    b.Property<int>("Square")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DistrictId");

                    b.ToTable("CleaningObject", (string)null);
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CleanerId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CleanerId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("District", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admiralteisky"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vasileostrovskiy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vyborgsky"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Kalininsky"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kirovsky"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Kolpinsky"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Krasnogvardeisky"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Krasnoselsky"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kronstadt"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Kurortniy"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Moskovsky"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Nevsky"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Petrogradsky"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Petrodvorets"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Primorsky"
                        });
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CleaningObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CleaningObjectId");

                    b.HasIndex("ClientId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("BundleOrder", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.Bundle", null)
                        .WithMany()
                        .HasForeignKey("BundlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogurtCleaning.DataLayer.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BundleService", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.Bundle", null)
                        .WithMany()
                        .HasForeignKey("BundlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogurtCleaning.DataLayer.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanerDistrict", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.Cleaner", null)
                        .WithMany()
                        .HasForeignKey("CleanersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogurtCleaning.DataLayer.Entities.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanerOrder", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.Cleaner", null)
                        .WithMany()
                        .HasForeignKey("CleanersBandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogurtCleaning.DataLayer.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanerService", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.Cleaner", null)
                        .WithMany()
                        .HasForeignKey("CleanersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogurtCleaning.DataLayer.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderService", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogurtCleaning.DataLayer.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.CleaningObject", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogurtCleaning.DataLayer.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("District");
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Comment", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.Cleaner", "Cleaner")
                        .WithMany("Comments")
                        .HasForeignKey("CleanerId");

                    b.HasOne("YogurtCleaning.DataLayer.Entities.Client", "Client")
                        .WithMany("Comments")
                        .HasForeignKey("ClientId");

                    b.HasOne("YogurtCleaning.DataLayer.Entities.Order", "Order")
                        .WithMany("Comments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cleaner");

                    b.Navigation("Client");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Order", b =>
                {
                    b.HasOne("YogurtCleaning.DataLayer.Entities.CleaningObject", "CleaningObject")
                        .WithMany("Orders")
                        .HasForeignKey("CleaningObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YogurtCleaning.DataLayer.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CleaningObject");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Cleaner", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.CleaningObject", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("YogurtCleaning.DataLayer.Entities.Order", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
